#ifndef __FS_IDL__
#define __FS_IDL__

module FS
{

	enum ErrorNumberType {
		NotSet,
		/*E2BIG,
		EACCES,
		EAGAIN,
		EBADF,
		EBADMSG,
		EBUSY,
		ECANCELED,
		ECHILD,
		EDEADLK,
		EDOM,
		EEXIST,
		EFAULT,
		EFBIG,
		EINPROGRESS,
		EINTR,
		EINVAL,*/
		EIo,
		/*EISDIR,
		EMFILE,
		EMLINK,
		EMSGSIZE,
		ENAMETOOLONG,
		ENFILE,
		ENODEV,
		ENOENT,
		ENOEXEC,
		ENOLCK,
		ENOMEM,
		ENOSPC,
		ENOSYS,*/
		NotDir
		/*ENOTEMPTY,
		ENOTSUP,
		ENOTTY,
		ENXIO,
		EPERM,
		EPIPE,
		ERANGE,
		EROFS,
		ESPIPE,
		ESRCH,
		ETIMEDOUT,
		EXDEV*/
	};

	typedef sequence < octet > OctetSequence;

	/**
	* This exception indicates an invalid file name was passed to a File
	* Service operation. The message provides information describing why the
	* filename was invalid. */
	exception InvalidFileName{
		ErrorNumberType errorNumber;
		string msg;
	};

	/**
	* This exception indicates a file-related error occurred. The message
	* shall provide information describing the error. The message can be
	* used for logging the error. */
	exception FileException{
		ErrorNumberType errorNumber;
		string msg;
		/**
		* The error code that corresponds to the error message. */
		//unsigned short errorCode;
	};

	interface File;

	struct DataType {
		string id;
		any value;
	};

	typedef sequence <DataType> Properties;

	interface FileSystem {
		exception UnknownFileSystemProperties {
			Properties invalidProperties;
		};
		
		const string SIZE = "SIZE";
		const string AVAILABLE_SIZE = "AVAILABLE_SPACE";
		
		enum FileType {
			PLAIN,
			FDIRECTORY,
			FILE_SYSTEM
		};

		struct FileInformationType {
			string name;
			FileType kind;
			unsigned long long size;
			Properties fileProperties;
		};

		typedef sequence < FileInformationType > FileInformationSequence;

		const string CREATED_TIME_ID = "CREATED_TIME";
		const string MODIFIED_TIME_ID = "MODIFIED_TIME";
		const string LAST_ACCESS_TIME_ID = "LAST_ACCESS_TIME";

		void remove (in string fileName) 
			raises (FileException,InvalidFileName);

		void copy (in string sourceFileName, in string destinationFileName)
			raises (InvalidFileName,FileException);

		boolean exists (in string fileName)
			raises (InvalidFileName);

		FileInformationSequence list (in string pattern)
			raises (FileException, InvalidFileName);

		File create (in string fileName)
			raises (InvalidFileName, FileException);

		File open (in string fileName, in boolean read_Only)
			raises (InvalidFileName, FileException);

		void mkdir (in string directoryName)
			raises (InvalidFileName, FileException);

		void rmdir (in string directoryName)
			raises (InvalidFileName, FileException);

		void query (inout Properties fileSystemProperties)
			raises (UnknownFileSystemProperties);

		attribute string currDir;
	};

	/**
	* The File interface provides the ability to read and write files
	* residing within a CF compliant distributed FileSystem. A file can be
	* thought of conceptually as a sequence of octets with a current
	* filepointer describing where the next read or write will occur.
	* This filepointer points to the beginning of the file upon construction
	* of the file object. The File interface is modeled after the POSIX/C
	* file interface. */
	interface File {
		/**
		* This exception indicates an error occurred during a read or
		* write operation to a File. The message provides information
		* describing why the I/O error occurred. */
		exception IOException {
			/**
			* The error code that corresponds to the error message. */
			//unsigned short errorCode;

			ErrorNumberType errorNumber;

			string msg;
		};

		/**
		* This exception indicates the file pointer is out of range
		* based upon the current file size. */
		exception InvalidFilePointer {
		};

		/**
		* The readonly fileName attribute contains the file name given
		* to the FileSystem open/create operation. The syntax for a
		* filename is based upon the UNIX operating system. That is, a
		* sequence of directory names separated by forward slashes (/)
		* followed by the base filename. The fileName attribute will
		* contain the filename given to the FileSystem::open operation. */
		readonly attribute string fileName;

		/**
		* The readonly filePointer attribute contains the file position
		* where the next read or write will occur. */
		readonly attribute unsigned long filePointer;

		/**
			* The read operation reads octets from the file referenced up to 
			* the number specified by the length parameter and change the value 
			* of the filePointer attribute forward by the number of octets 
			* actually read. The read operation only reads less than the 
			* maximum number of octets specified in the length parameter when 
			* an end of file is encountered.
			* 
			* The read operation returns via the out Message parameter an CF 
			* OctetSequence that equals the number of octets actually read from 
			* the File. If the filePointer attribute value reflects the end of 
			* the File, the read operation returns a 0-length CF OctetSequence.
			* 
			* The read operation raises the IOException when a read error occurs. */
		void read (
			out OctetSequence data,
			in unsigned long length
			)
			raises (IOException);

		/**
			* The write operation writes data to the file referenced. If the 
			* write is successful, the write operation shall increment the 
			* filePointer attribute to reflect the number of octets written. If 
			* the write is unsuccessful, the filePointer attribute value is 
			* maintained or is restored to its value prior to the write 
			* operation call.
			* 
			* This operation does not return any value.
			* 
			* The write operation raises the IOException when a write error occurs. */
		void write (
			in OctetSequence data
			)
			raises (IOException);
			
		/**
			* The sizeOf operation returns the current size of the file.
			* The CF FileException is raised when a file-releated error occurs 
			* (e.g. the file does not exist anymore). */
		unsigned long sizeOf ()
			raises (FileException);

		/**
			* The close operation releases any OE file resources associated 
			* with the component. The close operation makes the file 
			* unavailable to the component 
			* 
			* A client should release its CORBA File reference after closing 
			* the File. The close operation raises CF FileException exception 
			* when it cannot successfully close the file. */
		void close ()
			raises (FileException);

		/**
			* The setFilePointer operation positions the file pointer where 
			* the next read or write will occur.
			* 
			* The setFilePointer operation sets the filePointer attribute value 
			* to the input filePointer.
			* 
			* This operation does not return any value.
			* 
			* The setFilePointer operation raises the CF FileException when the 
			* File can not be successfully accessed to set thefilePointer 
			* attribute. The setFilePointer operation raises the 
			* InvalidFilePointer exception when the filePointer 
			* parameter exceeds the file size. */
		void setFilePointer (
			in unsigned long filePointer
			)
			raises (InvalidFilePointer,FileException);
	};

	interface FileManager : FileSystem {
		/**
		* The Mount structure identifies a FileSystem mounted within a
		* FileManager. */
		struct MountType {
			FileSystem fs;
			string mountPoint;
		};

		/**
		* This type defines an unbounded sequence of mounted
		* FileSystems. */
		typedef sequence <MountType> MountSequence;

		/**
		* This exception indicates a mount point does not exist within
		* the FileManager */
		exception NonExistentMount {
		};

		/**
		* This exception indicates the FileSystem is a null (nil) object
		* reference. */
		exception InvalidFileSystem {
		};

		/**
		* This exception indicates the mount point is already in use in
		* the file manager. */
		exception MountPointAlreadyExists {
		};

		/**
		 * The FileManager supports the notion of a federated file 
		 * system. To create a federated file system, the mount operation 
		 * associated a FileSystem with a mount point (a directory name). 
		 * 
		 * The mount operation associates the specified FileSystem with the 
		 * given mountPoint. A mountPoint name is a logical directory name
		 * for a FileSystem.
		 * 
		 * The mount operation raises the NonExistentMount exception when 
		 * the mountPoint (directory) name is not an absolute pathname 
		 * relative to the mounted file. 
		 * 
		 * The mount operation raises the MountPointAlreadyExists exception 
		 * when the mountPoint already exists in the file manager.
		 * 
		 * The InvalidFileSystem exception is raised when the input 
		 * FileSystem is a null object reference. */
		void mount (
			in string mountPoint,
			in FileSystem file_System
			)
			raises (InvalidFileName,InvalidFileSystem,MountPointAlreadyExists);

		/**
		 * The unmount operation removes a mounted FileSystem from the 
		 * FileManager whose mounted name matches the input mountPoint name. 
		 * The unmount operation raises NonExistentMount when the mount 
		 * point does not exist within the FileManager. */
		void unmount (
			in string mountPoint
			)
			raises (NonExistentMount);

		/**
		 * The getMounts operation returns the FileManager's mounted 
		 * FileSystems. */
		MountSequence getMounts ();
	};

};

#endif // __FS_IDL__
